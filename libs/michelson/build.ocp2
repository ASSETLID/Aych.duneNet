(**************************************************************************)
(*                                                                        *)
(*    Copyright (c) 2017       .                                          *)
(*    Fabrice Le Fessant, OCamlPro SAS <fabrice@lefessant.net>            *)
(*                                                                        *)
(*    All rights reserved. No warranty, explicit or implicit, provided.   *)
(*                                                                        *)
(**************************************************************************)

(* Most of this code is from Tezos, so we use include files and a submodule *)

if( with_tezos ) {

ocaml.debug = true;

compflags = [ "-bin-annot"; "-g"; "-thread"; "-short-paths"; "-safe-string";
                "-w"; "+27-30-40"; ];


OCaml.library("michelson", ocaml + {
     bytelink = [ "-custom" ];
     pp = [ "ocp-pp" ];
     files = [
        "data_encoding.ml";
        "error_monad_sig.ml";
        "error_monad.ml";
        "data_encoding_ezjsonm.ml"; 
        "cli_entries.ml", { pp = "ocp-pp" };

        "time.ml";
        "base58.ml";
        "hash.ml";
        "ed25519.ml";           (*    REWRITTEN *)
        "tezos_hash.ml";
        "tezos_data.ml";


        "qty_repr.ml";
        "tez_repr.ml";

        "script_int_repr.ml";

        "script_prim_repr.ml";  (* ?????????????????? *)
        
        "script_repr.ml";     
        "contract_repr.ml";
        "period_repr.ml";
        "constants_repr.ml";
        "seed_repr.ml";
        "roll_repr.ml";
        "cycle_repr.ml";
        "raw_level_repr.ml";
        "voting_period_repr.ml";
        "level_repr.ml";
        "fitness_repr.ml";
        "vote_repr.ml";
        "time_repr.ml";

        "persist.ml";           (* SIMPLIFIED *)
        "context.ml";           (*    REWRITTEN *)
        "storage_sigs.ml";
        "storage_functors.ml";
        "storage.ml";
        "level_storage.ml";
        "seed_storage.ml";
        "roll_storage.ml";
        "reward_storage.ml";
        "bootstrap_storage.ml";
        "vote_storage.ml";

        "contract_storage.ml";
        
        "tezos_context.ml"; (* rewritten. TODO *)
        
        "script_typed_ir.ml";
        "script_ir_translator.ml";
        "script_interpreter.ml";

        (* from client/embedded/alpha *)
          "script_located_ir.ml";
          "../../tezos/src/client/embedded/alpha/concrete_lexer.mll", { pp = [] };
          "../../tezos/src/client/embedded/alpha/concrete_parser.mly", { ocamlyacc = "menhir"; pp = [] };

          
          "apply.ml";           (* REWRITTEN *)
          "client_commands.ml"; (* REWRITTEN *)
          "client_aliases.ml";    (* REWRITTEN *)
          "packed_protocol.ml";   (* REWRITTEN *)
          "client_proto_args.ml";
          "client_proto_programs.ml";

          "init_storage.ml";

     ];
     requires = [
              "michelson-deps";
              "ezjsonm";
              "zarith";
              "ocplib-json-typed.bson"; (* data_encoding *)
              "ocplib-endian";     (* data_encoding *)
              "calendar";

     ];
   });

}

